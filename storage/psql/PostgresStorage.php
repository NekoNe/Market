<?php


include_once __DIR__ . "/../CustomersStorage.php";
include_once __DIR__ . "/../ExecutorsStorage.php";

class PsqlConfig
{
    public $host;
    public $port;
    public $dbname;
    public $credentials;
}

/*
 *  todo: customer and executor looks like the same entity.
 *  May be it should be a single entity User with Customer and Executors role?
 */
/*
 *  todo: do not try to access User object fields directly.
 *  Add interface to access them.
 */

class UserPsqlStorage implements CustomersStorage, ExecutorsStorage
{
    private $db;

    private $tableName = "customers";
    private $idField = "id";
    private $blanceField = "balance";

    private $userType; // todo: this solution looks like a hack

    public function __construct(PsqlConfig $config, string $tableName, $userType)
    {
        $this->tableName = $tableName;
        $this->userType = $userType;

        $this->db = pg_connect("$config->host $config->port $config->dbname $config->credentials");
        if(!$this->db)
        {
            echo "error: cannot connect to db";
            die; // todo
        }
        // todo: select balance type
        $query =<<<EOF
        CREATE TABLE IF NOT EXISTS {$this->tableName} (
          {$this->idField}     serial primary key,
          {$this->blanceField} numeric(16,0) 
        );
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
        }
    }

    public function __destruct()
    {
        pg_close($this->db);
    }

    // todo: this function mutates $customer. how would I show user this object mutates?
    public function Create(User $user)
    {
        $query =<<<EOF
            INSERT INTO {$this->tableName} ({$this->blanceField})
            VALUES ({$user->balance});
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }

        /*
         * currval() returns the last value generated by the sequence for the current session.
         * So, no race conditions are possible.
         */
        $query =<<<EOF
            SELECT currval(pg_get_serial_sequence('{$this->tableName}', '{$this->idField}'));
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die;
        }

        $ret = pg_fetch_result($ret, 0);
        $user->id = intval($ret);
    }

    public function Read(string $id): ?User
    {
        $query =<<<EOF
            SELECT * FROM {$this->tableName} WHERE {$this->idField} = {$id};
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $numRows = pg_numrows($ret);
        if($numRows != 1)
        {
            echo "not found";
            die; // todo
        }
        $obj = pg_fetch_object($ret, 0);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $customer = new $this->userType();
        $customer->id = $obj->{$this->idField};
        $customer->balance = floatval($obj->{$this->blanceField});

        return $customer;
    }

    // note: UPDATE changes rows order
    public function Update(string $id, callable $updater): ?User
    {
        $customer = $updater(null);
        $query =<<<EOF
            UPDATE {$this->tableName} 
                SET {$this->blanceField} = {$customer->balance}
                WHERE {$this->idField} = {$id}
                RETURNING *;
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $obj = pg_fetch_object($ret, 0);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $customer = new $this->userType();
        $customer->id = $obj->{$this->idField};
        $customer->balance = floatval($obj->{$this->blanceField});

        return $customer;
    }

    public function Delete(string $id)
    {
        $query =<<<EOF
            DELETE FROM {$this->tableName} WHERE {$this->idField} = {$id};
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $deleted = pg_affected_rows($ret);
        if($deleted == 0) {
            echo 'not found';
            die; // todo
        }
        if($deleted > 1) {
            echo 'internal server';
            die; // todo
        }
    }

    // todo: implement pagination
    public function List(int $offset, int $length): UsersList
    {
        $query =<<<EOF
            SELECT * FROM {$this->tableName};
EOF;
        $ret = pg_query($this->db, $query);
        if(!$ret)
        {
            echo pg_last_error($this->db);
            die; // todo
        }
        $list = new UsersList();
        while($obj = pg_fetch_object($ret))
        {
            $customer = new $this->userType();
            $customer->id = $obj->{$this->idField};
            $customer->balance = $obj->{$this->blanceField};

            $list->addUser($customer);
        }
        return $list;
    }
}

